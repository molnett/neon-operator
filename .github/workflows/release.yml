name: Release

on:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: quay.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        image:
          - name: molnett/neon-operator
            dockerfile: Dockerfile.operator
          - name: molnett/neon-operator-controlplane
            dockerfile: Dockerfile.controlplane

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image.name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.image.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,key=${{ matrix.image.name }}
            type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image.name }}:buildcache
          cache-to: |
            type=gha,mode=max,key=${{ matrix.image.name }}
            type=registry,ref=${{ env.REGISTRY }}/${{ matrix.image.name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "## Neon Operator $VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Docker Images" >> $GITHUB_OUTPUT
          echo "#### Operator" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator:$VERSION\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator:${{ steps.version.outputs.major }}\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator:latest\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "#### Controlplane" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator-controlplane:$VERSION\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator-controlplane:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator-controlplane:${{ steps.version.outputs.major }}\`" >> $GITHUB_OUTPUT
          echo "- \`${{ env.REGISTRY }}/molnett/neon-operator-controlplane:latest\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Supported Architectures" >> $GITHUB_OUTPUT
          echo "- linux/amd64" >> $GITHUB_OUTPUT
          echo "- linux/arm64" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Changes" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD | head -20 >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Neon Operator ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
